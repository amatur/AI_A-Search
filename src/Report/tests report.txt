--#
SIR GIVEN TCS
#--

________________________________________
2
1 1 
1 1
0
# all three admissible:
1. calculateColorsLeft():
2. edgeCount():
3. bfs:
4. fast()
Nodes Expanded: 1
Minimum number of moves = 0
________________________________________

3
3 1 2
1 1 2
2 2 1
0
# all three admissible:
1. calculateColorsLeft():
2. edgeCount():
3. bfs:
4. fast()
Nodes Expanded: 4
Minimum number of moves = 3
________________________________________
6
1 2 3 4 2 3
3 3 4 5 2 1
4 3 3 1 2 3
5 4 3 6 2 1
3 2 4 3 4 3
2 3 4 1 5 6
0

# all three admissible:
1. calculateColorsLeft():
        Nodes Expanded: 55
        Minimum number of moves = 9
2. edgeCount():
        Nodes Expanded: 267
        Minimum number of moves = 9
3. bfs:
        Nodes Expanded: 1708
        Minimum number of moves = 9
4. fast()
        Nodes Expanded: 12
        Minimum number of moves = 11
________________________________________
5
1 2 1 2 1
2 1 2 1 2
1 2 1 2 1
2 1 2 1 2
1 2 1 2 1
0
# all three admissible:
1. calculateColorsLeft():
2. edgeCount():
3. bfs:
4. fast()
Nodes Expanded: 9
Minimum number of moves = 8
________________________________________
5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
0
# all three admissible:
1. calculateColorsLeft():
2. edgeCount():
3. bfs:
4. fast()
Nodes Expanded: 5
Minimum number of moves = 4
________________________________________
5
1 1 1 3 1
1 2 2 1 1
3 1 3 1 1
2 1 1 1 1
1 1 1 1 1
0
________________________________________


--#
CUSTOM TCS
#--

________________________________________
7
1 2 2 3 2 1 5
2 1 3 1 2 2 4
3 2 1 2 1 3 3
1 2 2 3 2 1 2
2 1 3 1 2 2 1
3 2 1 2 1 3 4
1 2 2 3 2 1 5
0
#12
        Nodes Expanded: 68
        Minimum number of moves = 10
# all three admissible:
        Nodes Expanded: 92
        Minimum number of moves = 10
1. calculateColorsLeft():
        Nodes Expanded: 102
        Minimum number of moves = 10
2. edgeCount():
        Nodes Expanded: 24
        Minimum number of moves = 10
3. bfs:
        Nodes Expanded: 173
        Minimum number of moves = 10

4. fast()
        Nodes Expanded: 15
        Minimum number of moves = 13

WITH ERRORS (not flooding initially)
calcColorsLeft() 
    Nodes Expanded: 37047
    Minimum number of moves = 11
BEFORE skipping non progressive check - conn comp 
    Nodes Expanded: 12180
    Minimum number of moves = 10
_________________________________________

6
2 2 3 2 1 5
1 3 1 2 2 4
2 1 2 1 3 3
2 2 3 2 1 2
1 3 1 2 2 1
2 2 3 2 1 6
0

With error:
Nodes Expanded: 4466
Minimum number of moves = 10
After correction (no filtering)
Nodes Expanded: 3606
Minimum number of moves = 10

With edge count:
# 2 admissible
        Nodes Expanded: 82
        Minimum number of moves = 10
# all three admissible:
        Nodes Expanded: 81
        Minimum number of moves = 10
1. calculateColorsLeft():
        Nodes Expanded: 84
        Minimum number of moves = 10
2. edgeCount():
        Nodes Expanded: 734
        Minimum number of moves = 10
3. bfs:
        Nodes Expanded: 1532
        Minimum number of moves = 10
4. fast()
        Nodes Expanded: 17
        Minimum number of moves = 11
____________________________________________


--#
TRICKY CASES
#--

6
1 2 3 4 1 2 
4 3 2 5 6 3
5 6 1 6 5 4
4 3 2 1 4 5
5 6 1 2 3 6
6 5 4 3 2 1
0 
#FAILED
1. without conn comp filtering
- Failed(Too much time and memory)
2. only dijkstra
- Failed

#12
    Nodes Expanded: 1456
    Minimum number of moves = 13
# all three admissible:
(little slow)
    Nodes Expanded: 3190
    Minimum number of moves = 13
1. calculateColorsLeft():
    Nodes Expanded: 5224
    Minimum number of moves = 13
2. edgeCount():
    Nodes Expanded: 1986
Minimum number of moves = 13
3. bfs:
    Nodes Expanded: 22890
    Minimum number of moves = 13
4. fast()
    Nodes Expanded: 14
    Minimum number of moves = 13

_____________________________________________________

4
1 2 3 4 
4 3 2 5 
5 6 1 6
4 3 2 1
0

1. calculateColorsLeft():
Nodes Expanded: 40
Minimum number of moves = 9

2. edgeCount():
Nodes Expanded: 225
Minimum number of moves = 9

3. bfs:
Nodes Expanded: 1465
Minimum number of moves = 9

# all three admissible:
Nodes Expanded: 40
Minimum number of moves = 9

4. fast()
Nodes Expanded: 11
Minimum number of moves = 9

_______________________________________________________

8
1 3 3 1 1 6 2 4 
5 4 1 6 4 3 5 5 
3 3 6 6 6 3 1 3 
2 5 6 6 3 6 2 2 
4 2 2 6 5 3 3 4 
3 1 3 1 3 6 2 1 
6 2 4 3 1 4 6 2 
6 1 3 3 1 5 1 1 
0
#23
    Nodes Expanded: 2196
    Number of moves: 12
#12
    Nodes Expanded: 1604
    Number of moves: 12
# all three admissible:
    Nodes Expanded: 1604
    Number of moves: 12
1. calculateColorsLeft():
    Nodes Expanded: 2795
    Number of moves: 12
2. edgeCount():
    Nodes Expanded: 2196
    Number of moves: 12
3. bfs:
    Nodes Expanded: 15622
    Number of moves: 12
4. fast()
    Nodes Expanded: 17
    Number of moves: 16

___________________________________________________________________
14
1 3 4 1 2 4 4 2 3 4 4 1 1 3 
2 4 4 2 2 4 3 4 3 4 1 3 2 3 
4 1 1 4 1 4 1 3 2 1 4 1 1 2 
2 2 1 1 4 1 3 1 4 2 1 1 1 3 
4 1 4 2 4 4 3 2 2 3 2 3 1 4 
3 1 1 4 1 3 3 4 1 3 2 2 3 3 
4 1 2 3 4 4 1 4 2 4 2 4 4 2 
2 1 3 2 4 4 3 1 4 4 2 3 2 2 
1 1 2 2 2 1 3 1 4 2 4 4 1 3 
3 1 4 4 4 1 2 3 2 2 1 1 1 4 
4 1 1 1 3 4 4 3 3 3 1 6 4 1 
2 4 4 2 3 4 3 4 1 2 4 1 4 2 
3 2 3 3 2 4 1 4 4 5 4 2 2 6 
2 1 2 4 2 2 4 1 4 1 4 1 2 4 
0
#12
        
# all three admissible: (or 12)
        Nodes Expanded: 21653
        Number of moves: 17
1. calculateColorsLeft():
        Nodes Expanded: 47747
        Number of moves: 17
2. edgeCount():
        Nodes Expanded: 62991
        Number of moves: 17
3. bfs:
        FAILED
4. fast()
        Nodes Expanded: 21
        Number of moves: 20
______________________________________________________________


# all three admissible:
1. calculateColorsLeft():
2. edgeCount():
3. bfs:
4. fast()